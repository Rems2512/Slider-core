#include "WiFi.h"
#include "SPIFFS.h"
#include "ESPAsyncWebServer.h"

const char *ssid = "Kamera-Slider";
const char *password = "123456789";

AsyncWebServer server(80);


bool movingX = false;
bool moveX = false;
int steps;
bool richtung;

TaskHandle_t MoveMotorTask1;

void loop()
{
  vTaskDelete(NULL);
}


void MoveMotorTask(void *parameter) {
  Serial.print("Task MoveMotor auf Core: ");
  Serial.println(xPortGetCoreID());
  while (true){

    if (moveX == 1) {
      moveX = false;
      //driver.shaft(richtung);  //richtung




      for (uint16_t i = steps; i>0; i--) {  // eigentliche bewegung
        //digitalWrite(STEP_PIN, HIGH);
        delayMicroseconds(100);
        //digitalWrite(STEP_PIN, LOW);
        Serial.print("1");
        delayMicroseconds(100); 

       
        
      }

    }
    delay(100);  // den watchdog beruigen...
  } 
}






String handleMotorMove(String richtung_s){
  String motorState = "OFF";
  //String t_state = server.arg("LEDstate");         //Refer  xhttp.open("GET", "setLED?LEDstate="+led, true);
  Serial.println("Motorbewegung: " + richtung_s);
  if(richtung_s == "links") {
   movingX = true;
   
   richtung = false;
   steps = 100000000;
   motorState = "moving";       //Feedback parameter

   moveX = true;  // enabled das movement
 }
 else {
   movingX = true;
   
   richtung = true;
   steps = 1000;
   motorState = "moving";       //Feedback parameter

   moveX = true;  // enabled das movement 
 }
 return motorState;

  //server.send(200, "text/plane", ledState); //Send web page
}



/////////////////////////////////////////////////////////////////////////////////////////////
// Setup
//////////////////////////////////////////////////////////////////////////////////////////////
void setup()
{
  Serial.begin(115200);

    disableCore0WDT();
    disableCore1WDT();
    disableLoopWDT();


  if (!SPIFFS.begin())
  {
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }

  Serial.print("Setting AP (Access Point)…");
  // Remove the password parameter, if you want the AP (Access Point) to be open
  WiFi.softAP(ssid);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  Serial.println(WiFi.localIP());

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, "/dashboard.html", "text/html");
  });

  server.on("/dashboard.css", HTTP_GET, [](AsyncWebServerRequest *request) { //As second argument, we need to pass an enumerated value which indicates the HTTP methods allowed on the route. For this example, since we are simply getting random numbers generated by the ESP8266, we will be listening only for HTTP GET requests. Thus we pass the HTTP_GET value.
    request->send(SPIFFS, "/dashboard.css", "text/css");                     //As third and final argument, the on method receives the handling function that will be executed upon receiving the request. This function needs to follow a fixed signature, more precisely, it needs to return void and receive as input a pointer to an object of class AsyncWebServerRequest.
  });

  server.on("/script.js", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, "/script.js", "text/javascript");
  });



// LED Serverside Code
  server.on("/moveMotor", HTTP_GET, [](AsyncWebServerRequest *request) {
    /*int args = request->args();
    for (int i = 0; i < args; i++)
    {
      Serial.printf("ARG[%s]: %s\n", request->argName(i).c_str(), request->arg(i).c_str());
    }*/


    String arg = "3";                                           // 3 Zur Errordetektion

    if (request->hasArg("richtung"))                            //siehe xhttp.open("GET", "setLED?LEDstate="+led, true); im script
    { 
      arg = request->arg("richtung").c_str();                   //argument Empfangen

      Serial.println(arg.toInt());
      Serial.print("/movemotor auf Core:");
      Serial.println(xPortGetCoreID());


      request->send(200, "text/plain", handleMotorMove(arg));   //argument an handleLED Senden und dem Server antworten
    }
  });



// Analogen Wert an Server senden (ohne Extra funtkion unschön)
  server.on("/getdata", HTTP_GET, [](AsyncWebServerRequest *request) {

    // einteilung eines Strings in viele Infos
      //https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/String
      ///////////////////////////////////////////////////
      //Position: [1,2,3,4] in cm 
    int a = 1233;
    String data = String(a);
    Serial.println(data);
    request->send(200, "text/plain", data);
  });

  // Server Start
  Serial.println("ServerBeginn");
  server.begin();

  xTaskCreatePinnedToCore(
      MoveMotorTask, /* Function to implement the task */
      "MoveMotorTask", /* Name of the task */
      10000,  /* Stack size in words */
      NULL,  /* Task input parameter */
      5,  /* Priority of the task */
      &MoveMotorTask1,  /* Task handle. */
      0); /* Core where the task should run */


}

